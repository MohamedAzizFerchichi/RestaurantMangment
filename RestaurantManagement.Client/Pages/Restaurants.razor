@page "/restaurants"
@using RestaurantManagement.Shared.Models
@using System.Net.Http.Json
@using MudBlazor

@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject RestaurantManagement.Client.Services.IAuthService AuthService

<AuthorizeView>
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            <MudText Typo="Typo.h4" Class="mb-4">Restaurants</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateDialog" Class="mb-4">Add Restaurant</MudButton>

            @if (loading)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <MudGrid>
                    @foreach (var restaurant in restaurants)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@restaurant.Name</MudText>
                                    <MudText Typo="Typo.body2">@restaurant.Description</MudText>
                                    <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.LocationOn" /> @restaurant.Address</MudText>
                                    <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.Phone" /> @restaurant.PhoneNumber</MudText>
                                    <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.Email" /> @restaurant.Email</MudText>
                                    @if (!string.IsNullOrEmpty(restaurant.Website))
                                    {
                                        <MudText Typo="Typo.body2">
                                            <MudLink Href="@restaurant.Website" Target="_blank">Website</MudLink>
                                        </MudText>
                                    }
                                    <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.AccessTime" /> @restaurant.OpeningHours</MudText>
                                    <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.Restaurant" /> @restaurant.CuisineType</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => OpenEditDialog(restaurant))">Edit</MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => DeleteRestaurant(restaurant.Id))">Delete</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudText Color="Color.Error">You are not authorized to view this page.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Restaurant> restaurants = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRestaurants();
    }

    private async Task LoadRestaurants()
    {
        try
        {
            loading = true;
            var response = await Http.GetFromJsonAsync<List<Restaurant>>("api/restaurant");
            if (response != null)
            {
                restaurants = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading restaurants: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<RestaurantDialog>("Add Restaurant");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRestaurants();
        }
    }

    private async Task OpenEditDialog(Restaurant restaurant)
    {
        var parameters = new DialogParameters
        {
            { "Restaurant", restaurant }
        };
        var dialog = await DialogService.ShowAsync<RestaurantDialog>("Edit Restaurant", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRestaurants();
        }
    }

    private async Task DeleteRestaurant(int id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this restaurant?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Restaurant", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/restaurant/{id}");
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Restaurant deleted successfully!", Severity.Success);
                    await LoadRestaurants();
                }
                else
                {
                    Snackbar.Add("Failed to delete restaurant", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting restaurant: {ex.Message}", Severity.Error);
            }
        }
    }
}
